{"config": {"lang": ["en", "fr"], "separator": "[\\s\\-\\.]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "index.html", "title": "Introduction", "text": ""}, {"location": "index.html#bases-de-donnees-nosql-avec-cassandra", "title": "Bases de Donn\u00e9es NoSQL avec Cassandra", "text": ""}, {"location": "index.html#objectifs", "title": "Objectifs", "text": "<ul> <li>Installer Cassandra et cr\u00e9er une base de donn\u00e9es</li> <li>Interroger une base de donn\u00e9es orient\u00e9e colonnes</li> <li>Prot\u00e9ger la base de donn\u00e9es contre les pannes avec la R\u00e9plication</li> <li>Passer \u00e0 l'\u00e9chelle avec le Sharding</li> </ul>"}, {"location": "index.html#ressources", "title": "Ressources", "text": "<p>Outils</p> <ul> <li> Docker</li> <li> Jupyter Notebook</li> </ul> <p>Fichiers de donn\u00e9es (datasets)</p> <p>Sources et r\u00e9f\u00e9rence</p> <ul> <li>Documentation Cassandra</li> <li>Datastax Drivers</li> <li>Workshops DataStax</li> <li>DataStax Academy</li> <li>InstaClustr</li> </ul>"}, {"location": "index.html#presentation-de-cassandra", "title": "Pr\u00e9sentation de Cassandra", "text": "<p>Cassndra est un SGDB NoSQL de la cat\u00e9gorie orient\u00e9e colonne ou Wide Column. Il figure parmi les SGBD les plus utilis\u00e9 et le premier de la cat\u00e9gorie Wide column. </p> <p>Source : https://db-engines.com/en/ranking_trend/wide+column+store</p> <p></p> <p>Source : https://db-engines.com/en/ranking_trend</p>"}, {"location": "index.html#architecture", "title": "Architecture", "text": "<p>Un cluster Cassandra est un syst\u00e8me distribu\u00e9 organis\u00e9 selon un mod\u00e8le peer-to-peer sous la forme d'un anneau logique. </p> <p>Cassandra met en oeuvre les techniques de r\u00e9plication et partitionnement de donn\u00e9es afin de garantir la haute disponibilit\u00e9 et la r\u00e9sistance aux pannes.</p> <p>Il offre la possibilit\u00e9 de configurer la coh\u00e9rence par requ\u00eate.</p> <p></p> <p>Cassandra est utilis\u00e9, en l'associant avec d'autres frameworks, par de grandes entreprises (IBM, Ebay, Spotify, Instagram, ...). La description des diff\u00e9rentes architectures et crit\u00e8res de choix sont d\u00e9crits dans ces \u00e9tudes de cas </p>"}, {"location": "Collections_UDT.html", "title": "Collections et UDT", "text": ""}, {"location": "Collections_UDT.html#collections-et-udt", "title": "Collections et UDT", "text": "<p>Objectifs </p> <ul> <li>Manipuler les Collections</li> <li>Manipuler les UDT</li> <li>Utiliser une mod\u00e9lisation sp\u00e9cifique NOSQL (d\u00e9normalis\u00e9)</li> </ul>"}, {"location": "Collections_UDT.html#les-collections", "title": "Les collections", "text": "<p>Les collections permettent une repr\u00e9sentation d\u00e9normalis\u00e9e des donn\u00e9es. C'est une solution pour contourner l'absence d'op\u00e9ration de jointure. </p> <p>Cassandra d\u00e9finit 3 types de collections :</p> <ul> <li>MAP : repr\u00e9sentant un dictionnaire</li> <li>SET : repr\u00e9sentant un ensemble non ordonn\u00e9es </li> <li>LIST : repr\u00e9sentant un liste ordonn\u00e9e de valeurs</li> </ul>"}, {"location": "Collections_UDT.html#syntaxe", "title": "Syntaxe", "text": "<ul> <li>D\u00e9claration : <pre><code>MAP '&lt;' cql_type',' cql_type'&gt;'\nSET '&lt;' cql_type '&gt;'\nLIST '&lt;' cql_type'&gt;'\n</code></pre></li> <li>Lit\u00e9raux : <pre><code>map_literal::= '\\{' [ term ':' term (',' term : term)* ] '}'\nset_literal::= '\\{' [ term (',' term)* ] '}'\nlist_literal::= '[' [ term (',' term)* ] ']'\n</code></pre></li> <li>Acc\u00e8s :<ul> <li>MAP : map_name['key']</li> <li>LIST : list_name[index]</li> <li>SET : pas d'acc\u00e8s aux \u00e9l\u00e9ments</li> </ul> </li> <li>Op\u00e9rations :<ul> <li><code>+</code> : Ajout d'\u00e9l\u00e9ments</li> <li><code>-</code> : Supression d'\u00e9l\u00e9ments</li> <li><code>=</code> : Affectation</li> <li><code>CONTAINS</code> : tester l'appartenance d'un \u00e9l\u00e9ment \u00e0 une collection  N\u00e9cessite un index sur la colonne</li> <li><code>CONTAINS KEY</code> : tester la pr\u00e9sence d'une cl\u00e9 pour le type MAP  N\u00e9cessite un index sur la colonne</li> </ul> </li> <li>Index<ul> <li>LIST et SET : <pre><code>CREATE INDEX index_name ON table_name(column);\n</code></pre></li> <li>MAP : <pre><code>CREATE INDEX index_name ON table_name(KEYS (column));\nCREATE INDEX index_name ON table_name( VALUES (column));\n</code></pre></li> </ul> </li> </ul>"}, {"location": "Collections_UDT.html#exemples", "title": "Exemples", "text": "<p> Cr\u00e9er une table contenant des collections</p> <pre><code>CREATE TABLE personne (\n    id INT,\n    nom VARCHAR,\n    prenom VARCHAR,\n    evenements MAP &lt;text, date&gt;,\n    emails SET &lt;text&gt;,\n    enfants LIST &lt;text&gt;,\n    PRIMARY KEY (id)\n);\n</code></pre> <p> Cr\u00e9ation d'index</p> <p><pre><code>CREATE INDEX idx_emails ON personne(emails);\nCREATE INDEX idx_enfants ON personne(enfants);\nCREATE INDEX idx_evenement ON personne(KEYS(evenements));\nCREATE INDEX idx_evenement ON personne(VALUES(evenements));\n</code></pre>  Insertion de donn\u00e9es</p> <p><pre><code>INSERT INTO personne(id, nom, prenom, evenements, emails, enfants)\nVALUES (1, 'DELON','Alain',\n    {'naissance': '1935-11-08'},\n    {'alain@laposte.fr','alain.delon@laposte.fr'},\n    ['Anthony','Anouchka','Alain']);\n</code></pre>  Mise \u00e0 jour</p> <p><pre><code>-- Ajouter la date du mariage dans les \u00e9v\u00e9nements et supprimer un email et modifier le pr\u00e9nom d'un enfant\nUPDATE personne SET evenements = evenements + {'mariage':'1964-08-13'},\nemails = emails - {'alain@laposte.fr'}, enfants[2] = 'Alain-Fabien' \nWHERE id = 1;\n\n-- Supprimer le premier enfant\nDELETE enfants[0] FROM personne WHERE id = 1;\n</code></pre>  Recherche</p> <pre><code>-- Chercher la date de naissance des personnes ayant un email alain.delon@laposte.fr\nSELECT evenements['naissance'] FROM personne WHERE emails CONTAINS 'alain.delon@laposte.fr';\n\n-- Chercher les noms et pr\u00e9noms des personnes ayant un \u00e9v\u00e9nement mariage\nSELECT nom, prenom FROM personne WHERE evenements CONTAINS KEY 'mariage';\n</code></pre>"}, {"location": "Collections_UDT.html#les-types-utilisateurs-udt", "title": "Les types utilisateurs (UDT)", "text": "<p>Les types d\u00e9finis par l'utilisateur sont semblables aux enregistrements dans les langages de programmation. Il se composnt de champs.</p>"}, {"location": "Collections_UDT.html#syntaxe_1", "title": "Syntaxe", "text": "<p>La manipulation des UDT dans CQL est similaire \u00e0 celle des tables.</p> <ul> <li>D\u00e9finition <pre><code>CREATE TYPE [ IF NOT EXISTS ] &lt;udt_name&gt;(&lt;champ&gt; &lt;cql_type&gt;, ...);\n</code></pre></li> <li>Modification <pre><code>ALTER TYPE &lt;udt_name&gt; ADD &lt;champ&gt; &lt;cql_type&gt;;\nALTER TYPE &lt;udt_name&gt; RENAME &lt;ancien_nom&gt; TO &lt;nouveau_nom&gt;;\n</code></pre></li> <li>Suppression <pre><code>DROP TYPE &lt;udt_name&gt;;\n</code></pre></li> <li>Lit\u00e9raux <pre><code>{champ1:valeur, ...}\n</code></pre></li> <li>UDT et Collections <pre><code>CREATE TABLE T(collection MAP&lt;text frozen&lt;udt&gt;&gt;...);\n</code></pre></li> </ul>"}, {"location": "Collections_UDT.html#exemple", "title": "Exemple", "text": "<p>Exemple 1</p> <pre><code>CREATE TYPE address (\n    street text,\n    city text,\n    zip text\n);\n\nCREATE TABLE user (\n    name text PRIMARY KEY,\n    home address\n);\n\nINSERT INTO user (name, home) \nVALUES (\n    'z3 Pr3z1den7',\n    { \n        street: '1600 Pennsylvania Ave NW',\n        city: 'Washington',\n        zip: '20500' \n    }\n);\n</code></pre> <p>Exemple 2</p> <pre><code>CREATE TYPE phone (\n    country_code int,\n    number text,\n);\n\nCREATE TYPE address (\n    street text,\n    city text,\n    zip text,\n    phones map&lt;text, phone&gt;\n);\n\nCREATE TABLE user (\n    name text PRIMARY KEY,\n    addresses map&lt;text, frozen&lt;address&gt;&gt;\n);\n\nINSERT INTO user (name, addresses)\nVALUES (\n    'z3 Pr3z1den7', \n    {\n        'home' : {\n            street: '1600 Pennsylvania Ave NW',\n            city: 'Washington',\n            zip: '20500',\n            phones: { \n                'cell' : { country_code: 1, number: '202 456\u20101111' },\n                'landline' : { country_code: 1, number: '...' }\n            }\n        },\n        'work' : {\n            street: '1600 Pennsylvania Ave NW',\n            city: 'Washington',\n            zip: '20500',\n            phones: { 'fax' : { country_code: 1, number: '...' } }\n        }\n    }\n);\n</code></pre>"}, {"location": "Collections_UDT.html#exercice", "title": "Exercice", "text": "<p>Dans l\u2019archive fournie avec la section interrogation, nous allons utiliser le fichier <code>InspectionsRestaurant.json</code> dont la structure JSON est comme suit :</p> <pre><code>{\n    \"idRestaurant\": 40373938,\n    \"restaurant\": {\n        \"name\": \"IHOP\",\n        \"borough\": \"BRONX\",\n        \"buildingnum\": \"5655\",\n        \"street\": \"BROADWAY\",\n        \"zipcode\": \"10463\",\n        \"phone\": \"7185494565\",\n        \"cuisineType\": \"American\"\n    },\n    \"inspectionDate\": \"2016-08-16\",\n    \"violationCode\": \"04L\",\n    \"violationDescription\": \"Evidence of mice or live mice present in facility's food and/or non-food areas.\",\n    \"criticalFlag\": \"Critical\",\n    \"score\": 15,\n    \"grade\": \"\"\n}\n</code></pre>"}, {"location": "Collections_UDT.html#partie-1", "title": "Partie 1", "text": "<ol> <li>D\u00e9finir le mod\u00e8le de document associant les restaurants et leurs inspections, en utilisant les types imbriqu\u00e9s, et cr\u00e9er la table InspectionRestaurant selon le format JSON pr\u00e9c\u00e9dent.</li> <li>Ins\u00e9rer un document dans la table.</li> <li> <p>Faire l\u2019import avec l\u2019utilitaire d\u2019insertion de documents JSON.</p> <ol> <li>copier le fichier JSON et JAR dans le container</li> <li>importer avec l'utilitaire selon la syntaxe suivante</li> </ol> <p><pre><code>java -jar JSonFile2Cassandra [-host &lt;host&gt;] [-port &lt;port&gt;] [-keyspace &lt;keyspace&gt;] [-columnFamily &lt;columnFamily&gt;] [file]\n</code></pre> 4. Cr\u00e9er un index sur le Grade de la table InspectionRestaurant, puis trouver les restaurants ayant re\u00e7u le grade \u201cA\u201d au moins une fois.</p> </li> </ol>"}, {"location": "Collections_UDT.html#partie-2", "title": "Partie 2", "text": "<p>Maintenant, on veut pouvoir rechercher les restaurants par leur quartier (borough).</p> <ol> <li>Est-ce possible sur le sch\u00e9ma pr\u00e9c\u00e9dent ?</li> <li>Proposer une mod\u00e9lisation adapt\u00e9e, et cr\u00e9er la table. Utiliser cette fois la solution du map avec la date d\u2019insertion comme cl\u00e9.</li> <li>Ins\u00e9rer des donn\u00e9es dans la nouvelle table, soit directement, soit avec l\u2019utilitaire d\u2019import.</li> <li>Trouver tous les restaurants du Bronx.</li> <li>Maintenant, on veut, sur cette seconde table, trouver tous les restaurants ayant re\u00e7u une note \u201cA\u201d. Est-ce possible ? Chercher une solution permise par le fait que nous avons utilis\u00e9 le type map.</li> </ol>"}, {"location": "cluster.html", "title": "Cluster", "text": ""}, {"location": "cluster.html#cluster-cassandra", "title": "Cluster Cassandra", "text": ""}, {"location": "cluster.html#creer-un-cluster-cassandra", "title": "Cr\u00e9er un cluster Cassandra", "text": "<p>La cr\u00e9ation d'un cluster avec Docker est simple. En effet, pour configurer les noeuds, il existe 2 m\u00e9thodes :</p> <ul> <li>Utiliser des fichiers de configuration <code>cassandra.yaml</code> et les monter comme volumes (avec l'option -v).</li> <li>Utiliser les variables d'environnements (option -e) pour modifier les param\u00e8tres de configuration par d\u00e9faut.</li> </ul> <p>Dans ce quit suit nous utilisons les variables d'environnement dont :</p> <ul> <li>CASSANDRA_HOST : nom du noeud ou son adresse IP.</li> <li>CASSANDRA_CLUSTER_NAME : Nom du cluster ququel appartient le noeud.</li> <li>CASSANDRA_SEEDS : les noeuds du cluster Cassandra permettant le d\u00e9marrage du cluster (bootstrap) contact\u00e9s par les nouveaux noeuds.</li> <li>CASSANDRA_ENDPOINT_SNITCH : Nom du Snitch (d\u00e9termine les Racks et Datacenters auxquels apprtiennent les noeuds). Par d\u00e9faut SimpleSnitch.</li> <li>CASSANDRA_PASSWORD : Mot de passe pour l'utilisateur. Par d\u00e9fault: cassandra.</li> <li>CASSANDRA_PASSWORD_SEEDER : Un noeud par cluster qui permet de changer le mot de passe lors de l'initialisation.</li> <li>CASSANDRA_NUM_TOKENS : nombre de tokens g\u00e9r\u00e9s par un noeud. </li> <li>...</li> </ul> <p> Cr\u00e9er un r\u00e9seau Docker <pre><code>docker network create cassandra_network\n</code></pre></p> <p> Cr\u00e9er le premier noeud</p> <pre><code>docker run -d --name cass1 \\\n  --net=cassandra_network \\\n  -p 9042:9042 \\\n  -e CASSANDRA_CLUSTER_NAME=cassandra-cluster \\\n  -e CASSANDRA_NUM_TOKENS=1 \\\n  -e CASSANDRA_PASSWORD_SEEDER=yes \\\n  -e CASSANDRA_PASSWORD=mypassword \\\n  cassandra:4.0.6\n</code></pre> <p> Les noeuds appartenant au m\u00eame cluster ont le m\u00eame <code>CASSANDRA_CLUSTER_NAME</code>.</p> <p> Cr\u00e9er 2 autres noeuds</p> <pre><code>docker run -d --name cass2 \\\n  --net=cassandra_network \\\n  -e CASSANDRA_CLUSTER_NAME=cassandra-cluster \\\n  -e CASSANDRA_NUM_TOKENS=1 \\\n  -e CASSANDRA_SEEDS=cass1 \\\n  -e CASSANDRA_PASSWORD=mypassword \\\n  cassandra:4.0.6\ndocker run -d --name cass3 \\\n  --net=cassandra_network \\\n  -e CASSANDRA_CLUSTER_NAME=cassandra-cluster \\\n  -e CASSANDRA_NUM_TOKENS=1 \\\n  -e CASSANDRA_SEEDS=cass1 \\\n  -e CASSANDRA_PASSWORD=mypassword \\\n  cassandra:4.0.6\n</code></pre> <p> Maintenant, vous avez un cluster de 3 noeuds.</p>"}, {"location": "cluster.html#surveillance-du-cluster", "title": "Surveillance du cluster", "text": "<p> V\u00e9rifier l'\u00e9tat du cluster</p> <p><pre><code>docker exec cass1 nodetool status\n</code></pre>  Voir la r\u00e9partition des tokens</p> <p><pre><code>docker exec cass1 nodetool ring\n</code></pre>  R\u00e9cup\u00e9rer les statitiques sur les tables</p> <pre><code>docker exec cass1 nodetool tablestats\n</code></pre> JMX <p>Cassandra est compatible avec JMX. Un standard qui permet de publier des m\u00e9triques sur l'utilisation des ressources par Cassandra.</p> <p>Des outils VisualVM permettent de visualiser ces mesures. Toutefois, il faut pr\u00e9parer le container Docker pour une connexion externe JMX. Avec docker  1. Cr\u00e9er un fichier jmxremote.password contenant une ligne : <code>controlRole jmxpassword</code> 2. D\u00e9marrer le container avec la commande  <pre><code>docker run --name containerized-cassandra -p 7199:7199 -v jmxremote.password:/etc/cassandra/jmxremote.password -e LOCAL_JMX='no' cassandra:4.0.6\n</code></pre> 3. Se connecter avec VisualVM sur localhost:7199 avec les param\u00e8tres d'authentification controlRole et jmxpassword</p>"}, {"location": "cluster.html#mise-en-oeuvre-de-la-replication", "title": "Mise en oeuvre de la r\u00e9plication", "text": "<p> Se connecter \u00e0 un noeud du cluster avec cqlsh <pre><code>docker exec -it cass1 cqlsh\n</code></pre></p> <p> Cr\u00e9er un Keyspace avec un facteur de r\u00e9plication de 3 et ins\u00e9rer des donn\u00e9es <pre><code>CREATE KEYSPACE IF NOT EXISTS test_replication\nWITH REPLICATION = { 'class' :'SimpleStrategy', 'replication_factor': 3};\nUSE test_replication;\nCREATE TABLE cours (\n  id INT,\n  nom VARCHAR,\n  coefficient FLOAT,\n  PRIMARY KEY (id)\n);\nINSERT INTO cours(id, nom, coefficient) VALUES (1, 'NoSQL',1.5);\n</code></pre></p> <p> V\u00e9rifier la r\u00e9plication des lignes : Afficher les noeuds ayant une copie du cours 1 <pre><code>docker exec cass1 nodetool getendpoints test_replication cours 1\n</code></pre>  pour un facteur de r\u00e9plication 3, 3 noeuds diff\u00e9rents doivent \u00eatre affich\u00e9s</p> <p> V\u00e9rifier les \u00e9critures</p> <p><pre><code>docker exec cass1 nodetool cfstats test_replication\ndocker exec cass2 nodetool cfstats test_replication\ndocker exec cass3 nodetool cfstats test_replication\n</code></pre>  La valeur de Write Count doit \u00eatre \u00e9gale \u00e0 1 pour trois noeuds cons\u00e9cutifs sur l'anneau et 0 pour les autres.</p> <p> V\u00e9rifier la disponibilit\u00e9 des donn\u00e9es \u00e0 partir de tous les noeuds Se connecter \u00e0 un noeud avec Write Count \u00e9gal \u00e0 0 et acc\u00e9der aux donn\u00e9es. Si cass3 ne contient pas les noeuds : <pre><code>docker exec -it cass3 cqlsh\n</code></pre> puis </p> <pre><code>USE test_replication;\nSELECT * FROM cours;\n</code></pre> R\u00e9parer l'\u00e9tat de r\u00e9plication <p>Pour forcer la synchronisation des donn\u00e9es d'un Keyspace : <pre><code>docker exec cass1 nodetool repair test_replication\n</code></pre></p>"}, {"location": "cluster.html#mise-en-oeuvre-du-sharding", "title": "Mise en oeuvre du Sharding", "text": "<p> V\u00e9rifier les token attribu\u00e9 aux noeuds du cluster</p> <pre><code>docker exec cass1 nodetool ring\n</code></pre> <p>Un r\u00e9sultat possible est comme l'aper\u00e7u suivant :</p> <pre><code>root@ab7a361c7e9b:/# nodetool ring\n\nDatacenter: datacenter1\n==========\nAddress          Rack        Status State   Load            Owns                Token                                       \n                                                                                6081392343852191785                         \n172.26.0.2       rack1       Up     Normal  96.15 KiB       63.08%              -5126891207358132333                        \n172.26.0.4       rack1       Up     Normal  139.66 KiB      76.16%              1683513220770616142                         \n172.26.0.3       rack1       Up     Normal  96.06 KiB       60.76%              6081392343852191785  \n</code></pre> <p> Les noeuds de l'anneau virtuel sont 172.26.0.2 (cass1) puis 172.26.0.4 (cass3) et 172.26.0.3 (cass2) ayant respectivement les tokens -5126891207358132333, 1683513220770616142 et 1683513220770616142</p> Adresse IP <p>Pour obtenir l'adresse IP du container cass1 <pre><code>docker exec cass1 ip addr\n</code></pre> ou <pre><code>docker inspect -f '{{ .NetworkSettings.Networks.cassandra_network.IPAddress }}' cass1\n</code></pre></p> <p> Ins\u00e9rer d'autres lignes</p> <pre><code>docker exec -it cass1 cqlsh\n</code></pre> <p>puis <pre><code>USE test_replication;\nINSERT INTO cours(id, nom, coefficient) VALUES (10, 'Python',1);\nINSERT INTO cours(id, nom, coefficient) VALUES (100, 'Statistiques',1.5);\n</code></pre></p> <p> Afficher les tokens des donn\u00e9es ins\u00e9r\u00e9es</p> <pre><code>select token(id), id from test_replication.cours;\n system.token(id)     | id\n----------------------+-----\n -6715243485458697746 |  10\n -4069959284402364209 |   1\n  2008715943680221220 | 100\n\n(3 rows)\n</code></pre> <p> En examinant les valeurs, l'affectation des lignes selin l'id (cl\u00e9 primaire) aux noeuds du cluster est obtenu ainsi :</p> <ul> <li>token(1) = -4069959284402364209 dans ]-5126891207358132333, 1683513220770616142[ ==&gt; noeud 172.26.0.4</li> <li>token(10) = -6715243485458697746 &lt; -5126891207358132333 ==&gt; noeud 172.26.0.2</li> <li>token (100) = 2008715943680221220 dans ]1683513220770616142, 6081392343852191785[ ==&gt; noeud 172.26.0.3</li> </ul> <p> Sharding et replication</p> <p>Vu que la r\u00e9plication est aussi activ\u00e9e alors chaque ligne est r\u00e9pliqu\u00e9e dans le noeud suivant sur l'anneau.</p> <pre><code>docker exec -it cass1 bash\nroot@ab7a361c7e9b:/# nodetool getendpoints test_replication cours 1\n172.26.0.4\n172.26.0.3\nroot@ab7a361c7e9b:/# nodetool getendpoints test_replication cours 10\n172.26.0.2\n172.26.0.4\nroot@ab7a361c7e9b:/# nodetool getendpoints test_replication cours 100\n172.26.0.3\n172.26.0.2\n</code></pre>"}, {"location": "cluster.html#transactions-et-coherence", "title": "Transactions et coh\u00e9rence", "text": "<p> V\u00e9rifier le niveau de coh\u00e9rance par d\u00e9faut</p> <pre><code>docker exec -it cass1 cqlsh\n</code></pre> <p>puis</p> <p><pre><code>CONSISTENCY\nCurrent consistency level is ONE.\n</code></pre>  Le niveau de coh\u00e9rence est ONE.</p> Niveaux de coh\u00e9rence Cassandra <ul> <li>ONE (TWO, THREE): Le coordinateur re\u00e7oit la r\u00e9ponse du premier r\u00e9plica (ou de deux, ou de trois) et la renvoie au client. Cette strat\u00e9gie assure une haute disponibilit\u00e9, mais au risque de renvoyer un document qui n\u2019est pas synchronis\u00e9 avec les autres r\u00e9plicas. Dans ce cas, la coh\u00e9rence des donn\u00e9es n\u2019est pas assur\u00e9e</li> <li>QUORUM : Le coordinateur re\u00e7oit la r\u00e9ponse de au moins  r\u00e9plicas. C\u2019est la strat\u00e9gie qui repr\u00e9sente le meilleur compromis</li> <li>ALL : Le coordinateur re\u00e7oit la r\u00e9ponse de tous les r\u00e9plicas. Si un r\u00e9plica ne r\u00e9pond pas, alors la requ\u00eate sera en \u00e9chec. C\u2019est la strat\u00e9gie qui assure la meilleure coh\u00e9rence des donn\u00e9es, mais au prix de la disponibilit\u00e9 du syst\u00e8me</li> </ul> <p> Arr\u00eater les noeuds <pre><code>docker pause cass2 cass3\ndocker exec cass1 nodetool ring\n</code></pre></p> <p> Mettre le niveau de coh\u00e9rence \u00e0 ALL et interroger les donn\u00e9es</p> <pre><code>docker exec -it cass1 cqlsh\n</code></pre> <p>puis</p> <p><pre><code>use test_replication;\nconsistency all;\nselect * from cours where id = 1;\nselect * from cours where id = 10;\nselect * from cours where id = 100;\n</code></pre> Comme attendu, la r\u00e9ponse renvoy\u00e9e au client est une erreur pour toutes les requ\u00eates. </p> <p> Tester de nouveau le iveau ONE</p> <pre><code>docker exec -it cass1 cqlsh\n</code></pre> <p>puis</p> <p><pre><code>use test_replication;\nconsistency one;\nselect * from cours where id = 1;\nselect * from cours where id = 10;\nselect * from cours where id = 100;\n</code></pre>  Vu que le noeud cass1 contient les cours 10 et 100 (voir sharding), seule la premi\u00e8re requ\u00eate g\u00e9n\u00e8re une erreur.</p>"}, {"location": "installation.html", "title": "Installation", "text": ""}, {"location": "installation.html#installation-de-cassandra", "title": "Installation de Cassandra", "text": ""}, {"location": "installation.html#cassandra-avec-docker", "title": "Cassandra avec Docker", "text": ""}, {"location": "installation.html#installation", "title": "Installation", "text": "<p> T\u00e9l\u00e9charger l'image officielle de Cassandra (ici la version 4.0.6)</p> <p><pre><code>docker pull cassandra:4.0.6\n</code></pre> </p> <p></p> <p>Pour v\u00e9rifier que l'image est bien t\u00e9l\u00e9charg\u00e9e et inspecter sa taille :</p> <pre><code>docker images | grep cassandra\n</code></pre> <p></p> <p> Ex\u00e9cuter un container</p> <pre><code>docker run -d -p 9042:9042 --name cassandra cassandra:4.0.6\n</code></pre> <p></p>"}, {"location": "installation.html#verification", "title": "V\u00e9rification", "text": "<p>Pour v\u00e9rifier que le container est en cours d'ex\u00e9cution :</p> <pre><code>docker ps | grep cassandra\n</code></pre> <p> Se connecter \u00e0 Cassandra</p> <p> Avec le shell cqlsh <pre><code>docker exec -it cassandra cqlsh\n</code></pre></p> <p></p>"}, {"location": "installation.html#demarrerarreter-cassandra", "title": "D\u00e9marrer/Arr\u00eater Cassandra", "text": "<p>Maintenant, il est plus simple de d\u00e9marrer ou arr\u00eater Cassandra avec le container Docker d\u00e9j\u00e0 cr\u00e9\u00e9.</p> <ol> <li>Pour d\u00e9marrer : <pre><code>docker start cassandra\n</code></pre></li> <li>Pour Arr\u00eater : <pre><code>docker stop cassandra\n</code></pre></li> </ol>"}, {"location": "installation.html#configuration", "title": "Configuration", "text": "<p>L'emplacement des fichiers de configuration de Cassandra varie selon le type d'installation :</p> <ul> <li>Docker : le dossier /etc/cassandra</li> <li>Installation manuelle : le dossier conf dans le dossier d'installation</li> <li>Paquet deb ou rpm : dans /etc/cassandra</li> </ul> <p>Les fichiers de configuration sont :</p> <ul> <li><code>cassandra.yaml</code> : fichier de configuration principal selon le langage YAML.</li> <li><code>cassandra-env.sh</code> : les variables d'environnement sp\u00e9cifiques \u00e0 Cassandra.</li> <li><code>cassandra-rackdc.properties</code> ou <code>cassandra-topology.properties</code> : configuration des Racks et Datacenter pour les noeuds</li> <li><code>logback.xml</code> : configuration du logging</li> <li><code>jvm-*</code>: configuration de la JVM</li> <li><code>commitlog_archiving.properties</code>: param\u00e8tres d'archivage du commitlog</li> </ul> <p>Voici quelques param\u00e8tres \u00e0 renseigner dans le fichier <code>cassandra.yaml</code> :</p> <ul> <li>cluster_name : nom du cluster, identique pour les noeuds sur le m\u00eame cluster.</li> <li>seeds : liste des noeuds seed du cluster servant \u00e0 faciliter l'ajout de nouveaux noeuds.</li> <li>storage_port : par d\u00e9faut 7000.</li> <li>listen_address : adresse d'\u00e9coute du serveur. Par d\u00e9faut : localhost.</li> <li>native_transport_port : port utilis\u00e9 par les clients Cassandra comme le shell cqlsh ou le client Python. Par d\u00e9faut c'est le port 9042.</li> </ul>"}, {"location": "interrogation.html", "title": "Interrogation", "text": ""}, {"location": "interrogation.html#interrogation", "title": "Interrogation", "text": "<p>Objectifs </p> <ul> <li>Importer des donn\u00e9es \u00e0 partir de fichier CSV</li> <li>Cr\u00e9er des requ\u00eates CQL</li> <li>Comprendre le Partitionnement et le Clustering</li> <li>R\u00e9aliser des agr\u00e9gations</li> </ul>"}, {"location": "interrogation.html#importer-des-donnees-a-partir-de-fichiers-csv", "title": "Importer des donn\u00e9es \u00e0 partir de fichiers CSV", "text": "<p> T\u00e9l\u00e9charger l'archive contenant les donn\u00e9es</p> <ul> <li>T\u00e9l\u00e9charger l'archive restaurants.zip</li> <li>D\u00e9compresser le contenu</li> <li>Examiner le contenu des fichiers csv (voir ci-dessous)</li> </ul> <p>Il s'agit de donn\u00e9es concernant des restaurant de New York et les r\u00e9sultats des inspections r\u00e9alis\u00e9es \u00e0 ces derniers. Ces donn\u00e9es sont respectivement dans les fichiers <code>restaurants.csv</code> et <code>restaurants_inspections.csv</code>.</p> <p></p> <p></p> <p> Copier les fichiers CSV dans le container Cassandra</p> <pre><code>docker cp restaurants.csv cassandra:/\ndocker cp restaurants_inspections.csv cassandra:/ \n</code></pre> <p> Cr\u00e9er le Keyspace et les tables</p> <ol> <li>Se connecter \u00e0 Cassandra avec cqlsh <pre><code>docker exec -it cassandra cqlsh\n</code></pre></li> <li>Cr\u00e9er le Keyspace <pre><code>CREATE KEYSPACE IF NOT EXISTS resto_NY\nWITH REPLICATION = { 'class' :'SimpleStrategy', 'replication_factor': 1};\n</code></pre></li> <li>Cr\u00e9er les tables <pre><code>USE resto_NY;\nCREATE TABLE Restaurant (\n  id INT,\n  Name VARCHAR,\n  borough VARCHAR,\n  BuildingNum VARCHAR,\n  Street VARCHAR,\n  ZipCode INT,\n  Phone text,\n  CuisineType VARCHAR,\n  PRIMARY KEY (id)\n);\nCREATE INDEX fk_Restaurant_cuisine ON Restaurant (CuisineType);\nCREATE TABLE Inspection (\n  idRestaurant INT,\n  InspectionDate date,\n  ViolationCode VARCHAR,\n  ViolationDescription VARCHAR,\n  CriticalFlag VARCHAR,\n  Score INT,\n  GRADE VARCHAR,\n  PRIMARY KEY (idRestaurant, InspectionDate)\n);\nCREATE INDEX fk_Inspection_Restaurant ON Inspection (Grade);\n</code></pre></li> <li>Importer les fichier CSV avec la commande COPY <pre><code>COPY Restaurant (\n  id,\n  name,\n  borough,\n  buildingnum,\n  street,\n  zipcode,\n  phone,\n  cuisinetype\n)\nFROM\n'/restaurants.csv' WITH DELIMITER = ',' AND SKIPROWS = 1;\n\nCOPY Inspection (\n  idrestaurant,\n  inspectiondate,\n  violationcode,\n  violationdescription,\n  criticalflag,\n  score,\n  grade\n)\nFROM\n'/restaurants_inspections.csv' WITH DELIMITER = ',' AND SKIPROWS = 1;\n</code></pre></li> </ol> <p> DELIMITER est le s\u00e9parateur et SKIPROWS indique le nombre de lignes \u00e0 ignorer permettant ainsi d'ignorer l'ent\u00eate.</p> <p> V\u00e9rifier le nombre de lignes dans chaque table</p> <p><pre><code>SELECT count(*) FROM restaurant;\nSELECT count(*) FROM inspection; \n</code></pre>  Les r\u00e9ponses doivent \u00eatre respectivement 25624 et 149818</p>"}, {"location": "interrogation.html#format-de-la-requete-select", "title": "Format de la requ\u00eate SELECT", "text": "<pre><code>select_statement::= SELECT [ JSON | DISTINCT ] ( select_clause | '*' )\n    FROM `table_name`\n    [ WHERE `where_clause` ]\n    [ GROUP BY `group_by_clause` ]\n    [ ORDER BY `ordering_clause` ]\n    [ PER PARTITION LIMIT (`integer` | `bind_marker`) ]\n    [ LIMIT (`integer` | `bind_marker`) ]\n    [ ALLOW FILTERING ]\nselect_clause::= `selector` [ AS `identifier` ] ( ',' `selector` [ AS `identifier` ] )\nselector::== `column_name`\n    | `term`\n    | CAST '(' `selector` AS `cql_type` ')'\n    | `function_name` '(' [ `selector` ( ',' `selector` )_ ] ')'\n    | COUNT '(' '_' ')'\nwhere_clause::= `relation` ( AND `relation` )*\nrelation::= column_name operator term\n    '(' column_name ( ',' column_name )* ')' operator tuple_literal\n    TOKEN '(' column_name# ( ',' column_name )* ')' operator term\noperator::= '=' | '&lt;' | '&gt;' | '&lt;=' | '&gt;=' | '!=' | IN | CONTAINS | CONTAINS KEY\ngroup_by_clause::= column_name ( ',' column_name )*\nordering_clause::= column_name [ ASC | DESC ] ( ',' column_name [ ASC | DESC ] )*\n</code></pre>"}, {"location": "interrogation.html#requetes-simples", "title": "Requ\u00eates simples", "text": "<p> Quel est le nom du retaurant ayant l'id 41692194</p> <pre><code>SELECT name FROM restaurant WHERE id=41692194;\n</code></pre> <p> Quel est le nom du retaurant ayant un id sup\u00e9rieur \u00e0 41692194</p> <pre><code>SELECT name FROM restaurant WHERE id&gt;41692194;\n</code></pre> Remarque <p> Cette requ\u00eate provoque une erreur parce que Cassandra n'accepte que les conditions d'\u00e9galit\u00e9 sur la cl\u00e9 primaire.</p> <p> Ajouter ALLOW FILTERING pour l'ex\u00e9cuter.</p> <p> Quel est l'id du retaurant <code>BANGKOK HOUSE</code></p> <pre><code>SELECT id FROM restaurant WHERE name = 'BANGKOK HOUSE';\n</code></pre> Remarque <p> Cette requ\u00eate provoque une erreur parce que Cassandra n'accepte que les conditions sur la cl\u00e9 primaire.</p> <p> Ajouter ALLOW FILTERING pour l'ex\u00e9cuter ou ajouter un index sur la colonne name.</p> <p> Quels sont les dates d'inspections du retaurant d'id = 41692194</p> <pre><code>SELECT inspectiondate FROM inspection WHERE idrestaurant=41692194;\n</code></pre> Remarque <p> Remarquez que les dates sont tri\u00e9es. Puisque c'est la cl\u00e9 de clustering.</p> <p> Trouver les restaurants inspect\u00e9s entre le 12/10/2016 et les 3 jours qui suivent (r\u00e9sultat au format JSON)</p> <pre><code>SELECT JSON idrestaurant, inspectiondate FROM inspection WHERE inspectiondate&gt;='2016-10-12' and inspectiondate&lt;='2016-10-12'+3d ALLOW FILTERING;\n</code></pre> <p> Quels sont les jours de avril 2015 ayant au moins une inspection.</p> <pre><code>SELECT distinct inspectiondate FROM inspection WHERE inspectiondate&gt;='2015-04-01' and inspectiondate&lt;='2015-04-30' ALLOW FILTERING;\n</code></pre> Remarque <p> DISTINCT ne peut \u00eatre utilis\u00e9 qu'avec des colonnes statique ou cl\u00e9 de partitionnement et le filtrage doit porter sur la cl\u00e9 de partitionnement.</p> <p> Quel est le nom des retaurants ayant re\u00e7u un grade de A le 14/10/2016</p> <pre><code>SELECT idrestaurant FROM inspection WHERE grade='A' AND inspectiondate='2016-10-14';\n</code></pre> Remarque <p> Pas de jointure dans Cassandra.</p> <p> Utiliser les types utilisateur et les collections pour avoir une mod\u00e9lisation d\u00e9normalis\u00e9e.</p> <p> Quels sont les retaurants ayant \u00e9t\u00e9 inspect\u00e9 le 14/10/2016 tri\u00e9s selon le score d\u00e9croissant</p> <pre><code>SELECT idrestaurant, score FROM inspection WHERE inspectiondate='2016-10-14' ORDER BY score;\n</code></pre> Remarque <p> ORDER BY ne peut \u00eatre qu'avec un filtrage sur la cl\u00e9 primaire avec = ou IN et sur la cl\u00e9 de clustering.</p>"}, {"location": "interrogation.html#agregations", "title": "Agr\u00e9gations", "text": "<p> Quel est le nombre de restaurant de MANHATTAN</p> <pre><code>SELECT count(*) FROM restaurant WHERE borough='MANHATTAN' ALLOW FILTERING;\n</code></pre> <p> Quel est le nombre d'inspections par grade</p> <pre><code>SELECT grade, count(*) as total FROM inspection GROUP BY grade;\n</code></pre> Remarque <p> GROUP BY ne peut \u00eatre utilis\u00e9 qu'avec les colonnes de la cl\u00e9 primaire.</p> <p> Quel est le nombre d'inspections par jour</p> <pre><code>SELECT count(*) FROM inspection GROUP BY inspectiondate;\n</code></pre> Remarque <p> Les colonnes dans GROUP BY ne peuvent \u00eatre utilis\u00e9es que dans l'ordre de d\u00e9finition de la cl\u00e9 primaire.</p> <p> Quel est le nombre d'inspections par restaurant</p> <pre><code>SELECT idrestaurant, count(*) as total FROM inspection GROUP BY idrestaurant;\n</code></pre>"}, {"location": "ldd_lmd.html", "title": "Op\u00e9rations de base", "text": ""}, {"location": "ldd_lmd.html#operations-de-base", "title": "Op\u00e9rations de base", "text": "<p>Objectifs </p> <p>Dans cette section, une partie du langage CQL (Cassandra Query Language) sera explor\u00e9e. CQL est assez proche du langage SQL. Nous examinons les commandes CQL qui permettent de :</p> <ul> <li>Cr\u00e9er une BD Cassandra </li> <li>Ins\u00e9rer et supprimer des donn\u00e9es</li> <li>Modifier les donn\u00e9es</li> </ul>"}, {"location": "ldd_lmd.html#objets-cassandra", "title": "Objets Cassandra", "text": "<p>CQL permet d'organiser les donn\u00e9es en :</p> <ul> <li>Keyspace : C'est l'\u00e9quivalent de Bases de Donn\u00e9es. Il d\u00e9finit comment les donn\u00e9es sont r\u00e9pliqu\u00e9es dans le cluster.</li> <li>Table : Une table d\u00e9crit le sch\u00e9ma des donn\u00e9es qui sont r\u00e9parties en partitions. Ces derni\u00e8res contiennent des lignes form\u00e9es de colonnes. Les sch\u00e9mas des tables sont flexibles.</li> <li>Partition : C'est la premi\u00e8re partie de la cl\u00e9 primaire qui d\u00e9termine le noeud sur lequel une ligne est stock\u00e9e.</li> <li>Row : Une collection de colonnes identifi\u00e9e par une cl\u00e9 primaire unique compos\u00e9 de cl\u00e9 de partitonnement et une cl\u00e9 de clustering.</li> <li>Column : Donn\u00e9e \u00e9l\u00e9mentaire d'un type d\u00e9fini par le sch\u00e9ma.</li> </ul>"}, {"location": "ldd_lmd.html#langage-de-definition-de-donnees", "title": "Langage de D\u00e9finition de Donn\u00e9es", "text": ""}, {"location": "ldd_lmd.html#syntaxe", "title": "Syntaxe", "text": "<p>Keyspace</p> <ul> <li>Cr\u00e9ation <pre><code>CREATE KEYSPACE [ IF NOT EXISTS ] keyspace_name\n    WITH options\n</code></pre></li> <li>Modification <pre><code>ALTER KEYSPACE [ IF EXISTS ] keyspace_name\n    WITH options\n</code></pre></li> <li>Suppression <pre><code>DROP KEYSPACE [ IF EXISTS ] keyspace_name\n</code></pre></li> </ul> <p>Table</p> <ul> <li>Cr\u00e9ation <pre><code>CREATE TABLE [ IF NOT EXISTS ] table_name '('\ncolumn_definition  ( ',' column_definition )*\n[ ',' PRIMARY KEY '(' primary_key ')' ]\n    ')' [ WITH table_options ]\n\ncolumn_definition::= column_name cql_type [ STATIC ] [ PRIMARY KEY]\nprimary_key::= partition_key [ ',' clustering_columns ]\npartition_key::= column_name  | '(' column_name ( ',' column_name )* ')'\nclustering_columns::= column_name ( ',' column_name )*\ntable_options:=: COMPACT STORAGE [ AND table_options ]\n    | CLUSTERING ORDER BY '(' clustering_order ')'\n    [ AND table_options ]  | options\nclustering_order::= column_name (ASC | DESC) ( ',' column_name (ASC | DESC) )*\n</code></pre></li> <li>Modification <pre><code>ALTER TABLE [ IF EXISTS ] table_name alter_table_instruction\nalter_table_instruction::= ADD [ IF NOT EXISTS ] column_name cql_type ( ',' column_name cql_type )*\n    | DROP [ IF EXISTS ] column_name ( column_name )*\n    | RENAME [ IF EXISTS ] column_name to column_name (AND column_name to column_name)*\n    | WITH option\n</code></pre></li> <li>Suppression <pre><code>DROP TABLE [ IF EXISTS ] table_name\n</code></pre></li> </ul>"}, {"location": "ldd_lmd.html#exemples", "title": "Exemples", "text": "CQLSH <p>Les exemples suivants sont ex\u00e9cut\u00e9s \u00e0 partir du shell CQLSH.</p> <p> Cr\u00e9ation d'un Keyspace (BD) </p> <pre><code>CREATE KEYSPACE IF NOT EXISTS ecole\nWITH REPLICATION = {'class':'SimpleStrategy', 'replication_factor':3};\n</code></pre> <p> Cette commande cr\u00e9e un Keyspace ecole avec un facteur de r\u00e9plication \u00e9gal \u00e0 3. </p> <p> Un avertissement sera affich\u00e9 quand le nombre de noeuds est inf\u00e9rieur au facteur de r\u00e9plication.</p> <p> S\u00e9lectionner le Keyspace</p> <pre><code>USE ecole;\n</code></pre> <p> V\u00e9rifier l'invite du shell qui devient <code>cqlsh:ecole&gt;</code></p> <p> Cr\u00e9er les tables</p> <p>Nous pouvons maintenant cr\u00e9er les tables (ou Column Family sous Cassandra) Cours et Enseignant \u00e0 partir de notre sch\u00e9ma ecole :</p> <ul> <li>Cours(idCours, Intitule, Responsable, Niveau, nbHeuresMax, Coeff)</li> <li>Enseignant(idEnseignant, Nom, Prenom, statut)</li> </ul> <p>La requ\u00eate de cr\u00e9ation de la table Cours : </p> <pre><code>CREATE TABLE Cours(\n    idCours INT,\n    Intitule VARCHAR,\n    Responsable INT,\n    Niveau VARCHAR,\n    nbHeuresMax INT,\n    Coeff INT,\n    PRIMARY KEY (idCours)\n);\n</code></pre> <p>La requ\u00eate de cr\u00e9ation de la table Enseignant : </p> <p><pre><code>CREATE TABLE Enseignant(\n    idEnseignant INT,\n    Nom VARCHAR,\n    Prenom VARCHAR,\n    PRIMARY KEY (idEnseignant)\n);\n</code></pre>  Afficher les propri\u00e9t\u00e9s du Keyspace</p> <pre><code>DESCRIBE ecole;\n</code></pre> <p>Un exemple de r\u00e9sultat est donn\u00e9 ci-dessous :</p> <pre><code>CREATE KEYSPACE ecole WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'}  AND durable_writes = true;\n\nCREATE TABLE ecole.cours (\n    idcours int PRIMARY KEY,\n    coeff int,\n    intitule text,\n    nbheuresmax int,\n    niveau text,\n    responsable int\n) WITH additional_write_policy = '99p'\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND cdc = false\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND default_time_to_live = 0\n    AND extensions = {}\n    AND gc_grace_seconds = 864000\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair = 'BLOCKING'\n    AND speculative_retry = '99p';\n\nCREATE TABLE ecole.enseignant (\n    idenseignant int PRIMARY KEY,\n    nom text,\n    prenom text\n) WITH additional_write_policy = '99p'\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND cdc = false\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND default_time_to_live = 0\n    AND extensions = {}\n    AND gc_grace_seconds = 864000\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair = 'BLOCKING'\n    AND speculative_retry = '99p';\n</code></pre> <p> Ajouter une colonne</p> <p>Nous avons oublier de d\u00e9finir la colonne Statut. Pour l'ajouter, \u00e9crire la commande suivante :</p> <pre><code>ALTER TABLE Enseignant ADD Statut VARCHAR;\n</code></pre> <p>Puis v\u00e9rifier avec :</p> <pre><code>DESC Enseignant;\n</code></pre> <p> Cr\u00e9er un index</p> <p>Afin de permettre la recherche par enseignant responsable dans la table Cours, nous ajoutons un index sur la colonne Responsable :</p> <pre><code>CREATE INDEX idx_Responsable ON Cours(Responsable);\n</code></pre> FOREIGN KEY <p>Cassandra ne supporte pas les cl\u00e9s \u00e9trang\u00e8res.</p>"}, {"location": "ldd_lmd.html#langage-de-manipulation-de-donnees", "title": "Langage de Manipulation de Donn\u00e9es", "text": ""}, {"location": "ldd_lmd.html#syntaxe_1", "title": "Syntaxe", "text": "<ul> <li>Insertion <pre><code>INSERT INTO table_name ( names_values | json_clause )\n[ IF NOT EXISTS ]\n[ USING update_parameter ( AND update_parameter )* ]\n\nnames_values::= names VALUES tuple_literal\njson_clause::= JSON string [ DEFAULT ( NULL | UNSET ) ]\nnames::= '(' column_name ( ',' column_name )* ')'\n</code></pre></li> <li>Modification <pre><code>UPDATE table_name\n[ USING update_parameter ( AND update_parameter )* ]\nSET assignment( ',' assignment )*\nWHERE where_clause\n[ IF ( EXISTS | condition ( AND condition)*) ]\n\nupdate_parameter ::= ( TIMESTAMP | TTL ) ( integer | bind_marker )\nassignment: simple_selection'=' term\n                | column_name'=' column_name ( '+' | '-' ) term\n                | column_name'=' list_literal'+' column_name\nsimple_selection ::= column_name\n                        | column_name '[' term']'\n                        | column_name'.' field_name\ncondition ::= simple_selection operator term\n</code></pre></li> <li>Suppression <pre><code>DELETE [ simple_selection ( ',' simple_selection ) ]\nFROM table_name\n[ USING update_parameter ( AND update_parameter# )* ]\nWHERE where_clause\n[ IF ( EXISTS | condition ( AND condition)*) ]\n</code></pre></li> </ul>"}, {"location": "ldd_lmd.html#exemples_1", "title": "Exemples", "text": "<p> Insertion des donn\u00e9es</p> <pre><code>INSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (1,'Introduction aux Bases de Donnees',1,'M1',30,3);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (2,'Immeubles de Grandes Hauteurs',4,'M1',30,2);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (3,'Production et distribution de biens et de ser',5,'M1',30,2);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (4,'Bases de Donnees Avancees',1,'M2',30,5);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (5,'Architecture des Systemes Materiel',6,'M2',8,1);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (6,'IT Business / Introduction',7,'M2',20,3);\nINSERT INTO Cours (idCours,Intitule,Responsable,Niveau,nbHeuresMax,Coeff) \nVALUES (7,'IT Business / Strategie et Management',8,'M2',10,1);\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (1,'Travers','Nicolas','Vacataire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (2,'Mourier','Pascale','Titulaire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (3,'Boisson','Francois','Vacataire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (4,'Mathieu','Eric','Titulaire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (5,'Chu','Chengbin','Titulaire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (6,'Boutin','Philippe','Titulaire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (7,'Escribe','Julien','Vacataire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (8,'Znaty','David','Vacataire');\nINSERT INTO Enseignant (idEnseignant,Nom,Prenom,statut) VALUES (9,'Abal-Kassim','Cheik Ahamed','Vacataire');\n</code></pre> <p>V\u00e9rifier, par exemple, le contenu de la table enseignant :</p> <pre><code>SELECT * FROM Enseignant;\n</code></pre> <p> Mise \u00e0 jour</p> <pre><code>UPDATE Cours Set nbheuresmax = 10 WHERE idCours = 5;\n</code></pre> <p> Modifier le nombre d'heures Max pour le cours 5.</p> <p> Suppression</p> <pre><code>DELETE FROM Cours WHERE idCours in (1,3,5);\n</code></pre> <p> Supprimer les cours de codes 1, 3 et 5.</p>"}, {"location": "python.html", "title": "Client Python pour Cassandra", "text": ""}, {"location": "python.html#client-python-pour-cassandra", "title": "Client Python pour Cassandra", "text": "<p>Pr\u00e9requis</p> <ul> <li>La base de donn\u00e9es de la section interrogation est import\u00e9e</li> <li>D\u00e9marrer le container cassandra (port 9042 doit \u00eatre publi\u00e9)</li> </ul> <p>Objectifs</p> <ul> <li>Se connecter \u00e0 Cassandra avec le pilote PYthon</li> <li>Ex\u00e9cuter des requ\u00eates vers Cassandra et r\u00e9cup\u00e9rer leurs r\u00e9sultats avec Python</li> </ul> \u00c0 faire <p>T\u00e9l\u00e9charger le notebook jupyter (cassandraPython.ipynb ) ci-dessous et tester le code.</p>"}, {"location": "encryptcontent_plugin_1;w2cGLWokYCA1PjSnxN3poQ==;oJEjaRWx+/NxVBVbzNmksA==", "title": "20Nv7ZwMW6MdJZSGZzRytA==;mmhNe5bTpqQYdXn+Bd28Ju6d+sH12M5jflV/zhIHjM8=", "text": "H4KJtd/rhev6Ezn0XGcKiw==;9HLq5nSGxCPrDCuWDszKYtvjGZNvzK673v84+BXlio8="}]}